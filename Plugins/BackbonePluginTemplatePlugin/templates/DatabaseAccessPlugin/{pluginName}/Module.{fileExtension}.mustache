using Autofac;
using DatabaseAccessPluginTemplate.Database;
using Messerli.Backbone.PluginAbstractions.Http.Routing;
using Messerli.Backbone.PluginAbstractions.Navigation;
using Messerli.Backbone.PluginAbstractions.PageRendering;
using Messerli.Backbone.PluginAbstractions.Persistence;
using Messerli.{{RepositoryName}}.Database;
using Messerli.{{RepositoryName}}.Gui;
using Messerli.{{RepositoryName}}.Gui.View;
using Messerli.{{RepositoryName}}.Registrar;

namespace Messerli.{{RepositoryName}}
{
    internal sealed class Module : Autofac.Module
    {
        private readonly IRouteRegistry _routeRegistry;

        private readonly IPersistenceContextBuilder _persistenceContextBuilder;

        private readonly PageRendererFactory _pageRendererFactory;

        private readonly INavigationRegistry _navigationRegistry;

        public Module(
            IRouteRegistry routeRegistry,
            IPersistenceContextBuilder persistenceContextBuilder,
            PageRendererFactory pageRendererFactory,
            INavigationRegistry navigationRegistry)
        {
            _routeRegistry = routeRegistry;
            _persistenceContextBuilder = persistenceContextBuilder;
            _pageRendererFactory = pageRendererFactory;
            _navigationRegistry = navigationRegistry;
        }

        protected override void Load(ContainerBuilder builder)
        {
            builder.RegisterInstance(_routeRegistry);
            builder.RegisterInstance(_persistenceContextBuilder);
            builder.RegisterInstance(_pageRendererFactory);
            builder.RegisterInstance(_navigationRegistry);

            builder.RegisterType<RouteRegistrar>().As<IRouteRegistrar>();
            builder.RegisterType<Controller>().As<IController>();
            builder.RegisterType<View>().As<IView>();
            builder.RegisterType<Presenter>().As<IPresenter>();
            builder.RegisterType<NavigationRegistrar>().As<INavigationRegistrar>();
            builder.RegisterType<PersonPersistence>().As<IPersonPersistence>();
        }
    }
}
