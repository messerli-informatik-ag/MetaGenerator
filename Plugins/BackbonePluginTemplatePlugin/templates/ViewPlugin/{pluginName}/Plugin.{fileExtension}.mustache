using System;
using System.Threading.Tasks;
using Autofac;
using Messerli.Backbone.PluginAbstractions.V0;
using Messerli.Backbone.PluginAbstractions.V0.Http.Routing;
using Messerli.Backbone.PluginAbstractions.V0.Navigation;
using Messerli.Backbone.PluginAbstractions.V0.PageRendering;
using Messerli.{{PluginName}}.Registrar;

namespace Messerli.{{PluginName}}
{
    [PluginIdentifier("PluginTemplate")]
    public sealed class Plugin : IBackbonePlugin, IDisposable
    {
        private readonly IContainer _compositionRoot;

        public Plugin(
            IRouteRegistry routeRegistry,
            PageRendererFactory pageRendererFactory,
            INavigationRegistry navigationRegistry)
        {
            _compositionRoot =
                BuildCompositionRoot(
                    routeRegistry,
                    pageRendererFactory,
                    navigationRegistry);
        }

        public void Dispose()
            => _compositionRoot.Dispose();

        public Task StartService()
        {
            _compositionRoot.Resolve<IRouteRegistrar>().RegisterRoutes();
            _compositionRoot.Resolve<INavigationRegistrar>().RegisterNavigation();
            return Task.CompletedTask;
        }

        private static IContainer BuildCompositionRoot(
            IRouteRegistry routeRegistry,
            PageRendererFactory pageRendererFactory,
            INavigationRegistry navigationRegistry)
        {
            var pluginTemplateModule =
                new {{PluginName}}Module(
                    routeRegistry,
                    pageRendererFactory,
                    navigationRegistry);

            var builder = new ContainerBuilder();
            builder.RegisterModule(pluginTemplateModule);

            return builder.Build();
        }
    }
}
